{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manis\\\\Downloads\\\\maid-service-platform-complete\\\\frontend\\\\src\\\\components\\\\RazorpayPayment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RazorpayPayment = ({\n  amount,\n  onSuccess,\n  onFailure,\n  bookingData\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const loadRazorpayScript = () => {\n    return new Promise(resolve => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.body.appendChild(script);\n    });\n  };\n  const handlePayment = async () => {\n    setLoading(true);\n    try {\n      // Load Razorpay script\n      const scriptLoaded = await loadRazorpayScript();\n      if (!scriptLoaded) {\n        alert('Razorpay SDK failed to load. Check your internet connection.');\n        return;\n      }\n\n      // Create order\n      const orderResponse = await axios.post('/api/payments/create-order', {\n        amount: amount,\n        currency: 'INR'\n      });\n      const {\n        orderId,\n        key\n      } = orderResponse.data.data;\n\n      // Razorpay options\n      const options = {\n        key: key,\n        amount: amount * 100,\n        currency: 'INR',\n        name: 'CleanConnect',\n        description: 'Maid Service Payment',\n        order_id: orderId,\n        handler: async response => {\n          try {\n            // Verify payment\n            const verifyResponse = await axios.post('/api/payments/verify', {\n              razorpay_order_id: response.razorpay_order_id,\n              razorpay_payment_id: response.razorpay_payment_id,\n              razorpay_signature: response.razorpay_signature\n            });\n            if (verifyResponse.data.success) {\n              onSuccess({\n                orderId: response.razorpay_order_id,\n                paymentId: response.razorpay_payment_id\n              });\n            } else {\n              onFailure('Payment verification failed');\n            }\n          } catch (error) {\n            onFailure('Payment verification error');\n          }\n        },\n        prefill: {\n          name: bookingData.customerName || '',\n          email: bookingData.customerEmail || '',\n          contact: bookingData.customerPhone || ''\n        },\n        theme: {\n          color: '#3B82F6'\n        }\n      };\n      const razorpay = new window.Razorpay(options);\n      razorpay.open();\n    } catch (error) {\n      console.error('Payment error:', error);\n      onFailure('Payment initiation failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"razorpay-payment\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: loading,\n      className: \"btn-primary w-full py-3 px-4\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), \"Processing...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this) : `Pay ₹${amount} with Razorpay`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(RazorpayPayment, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = RazorpayPayment;\nexport default RazorpayPayment;\nvar _c;\n$RefreshReg$(_c, \"RazorpayPayment\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","RazorpayPayment","amount","onSuccess","onFailure","bookingData","_s","loading","setLoading","loadRazorpayScript","Promise","resolve","script","document","createElement","src","onload","onerror","body","appendChild","handlePayment","scriptLoaded","alert","orderResponse","post","currency","orderId","key","data","options","name","description","order_id","handler","response","verifyResponse","razorpay_order_id","razorpay_payment_id","razorpay_signature","success","paymentId","error","prefill","customerName","email","customerEmail","contact","customerPhone","theme","color","razorpay","window","Razorpay","open","console","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/manis/Downloads/maid-service-platform-complete/frontend/src/components/RazorpayPayment.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst RazorpayPayment = ({ amount, onSuccess, onFailure, bookingData }) => {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const loadRazorpayScript = () => {\r\n        return new Promise((resolve) => {\r\n            const script = document.createElement('script');\r\n            script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n            script.onload = () => resolve(true);\r\n            script.onerror = () => resolve(false);\r\n            document.body.appendChild(script);\r\n        });\r\n    };\r\n\r\n    const handlePayment = async () => {\r\n        setLoading(true);\r\n        \r\n        try {\r\n            // Load Razorpay script\r\n            const scriptLoaded = await loadRazorpayScript();\r\n            if (!scriptLoaded) {\r\n                alert('Razorpay SDK failed to load. Check your internet connection.');\r\n                return;\r\n            }\r\n\r\n            // Create order\r\n            const orderResponse = await axios.post('/api/payments/create-order', {\r\n                amount: amount,\r\n                currency: 'INR'\r\n            });\r\n\r\n            const { orderId, key } = orderResponse.data.data;\r\n\r\n            // Razorpay options\r\n            const options = {\r\n                key: key,\r\n                amount: amount * 100,\r\n                currency: 'INR',\r\n                name: 'CleanConnect',\r\n                description: 'Maid Service Payment',\r\n                order_id: orderId,\r\n                handler: async (response) => {\r\n                    try {\r\n                        // Verify payment\r\n                        const verifyResponse = await axios.post('/api/payments/verify', {\r\n                            razorpay_order_id: response.razorpay_order_id,\r\n                            razorpay_payment_id: response.razorpay_payment_id,\r\n                            razorpay_signature: response.razorpay_signature\r\n                        });\r\n\r\n                        if (verifyResponse.data.success) {\r\n                            onSuccess({\r\n                                orderId: response.razorpay_order_id,\r\n                                paymentId: response.razorpay_payment_id\r\n                            });\r\n                        } else {\r\n                            onFailure('Payment verification failed');\r\n                        }\r\n                    } catch (error) {\r\n                        onFailure('Payment verification error');\r\n                    }\r\n                },\r\n                prefill: {\r\n                    name: bookingData.customerName || '',\r\n                    email: bookingData.customerEmail || '',\r\n                    contact: bookingData.customerPhone || ''\r\n                },\r\n                theme: {\r\n                    color: '#3B82F6'\r\n                }\r\n            };\r\n\r\n            const razorpay = new window.Razorpay(options);\r\n            razorpay.open();\r\n        } catch (error) {\r\n            console.error('Payment error:', error);\r\n            onFailure('Payment initiation failed');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"razorpay-payment\">\r\n            <button\r\n                onClick={handlePayment}\r\n                disabled={loading}\r\n                className=\"btn-primary w-full py-3 px-4\"\r\n            >\r\n                {loading ? (\r\n                    <div className=\"flex items-center justify-center\">\r\n                        <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\r\n                        Processing...\r\n                    </div>\r\n                ) : (\r\n                    `Pay ₹${amount} with Razorpay`\r\n                )}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RazorpayPayment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}